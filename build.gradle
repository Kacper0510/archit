plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'application'
	id 'antlr'
}

version = project.mod_version
group = project.maven_group

application {
    mainClass = project.app_main
}

generateGrammarSource {
	arguments += [
		'-package', 'archit.parser', '-visitor', '-Xexact-output-dir'
	]
}

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
}

dependencies {
	// Minecraft and Fabric dependencies
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Antlr
	antlr "org.antlr:antlr4:${project.antlr_version}"
	implementation "org.antlr:antlr4-runtime:${project.antlr_version}"

	// Command line interface dependencies
	implementation "org.fusesource.jansi:jansi:${project.jansi_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.register('copyExamples', Copy) {
    from 'examples'
    into 'run/archit-scripts'
	rename('(.*)', 'example_$1')
}

tasks.named('runClient') {
    dependsOn 'copyExamples'
}

tasks.named('runServer') {
    dependsOn 'copyExamples'
}

tasks.register('fixAntlrStructure') {
    dependsOn 'generateGrammarSource'
    mustRunAfter 'generateGrammarSource'
    doLast {
        copy {
            from 'build/generated-src/antlr/main'
            into 'build/generated-fix/archit/parser'
        }
        delete 'build/generated-src'
    }
}

tasks.named('generateGrammarSource') {
    finalizedBy 'fixAntlrStructure'
}

tasks.named('compileJava') {
    dependsOn 'fixAntlrStructure'
}

sourceSets {
    main {
        java {
            srcDirs = ['build/generated-fix', 'src/main/java']
        }
    }
}

tasks.named('run') {
	systemProperty "jansi.force", "true"
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

def jarPackedDeps = ['antlr4-runtime', 'jansi']

afterEvaluate {
	jar {
		inputs.property "archivesName", project.base.archivesName

		manifest {
			attributes(
				'Main-Class': project.app_main
			)
		}

		// Manual shadow JAR packing, do not try to refactor or everything will inevitably explode...
		configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			if (jarPackedDeps.contains(artifact.moduleVersion.id.name)) {
				from(zipTree(artifact.file)) {
					exclude 'META-INF/MANIFEST.MF'
				}
			}
		}
	}
}
